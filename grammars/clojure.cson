name: "Clojure"
scopeName: "source.clojure"
fileTypes: [
  "clj"
  "cljs"
  "edn"
]
patterns: [
  { include: "#namespace" }
  { include: "#require" }

  { include: "#special" }

  { include: "#expression" }
  { include: "#definition_type" }
  { include: "#definition_name" }
  { include: "#definition_parameter" }

  { include: "#symbol" }
  { include: "#empty_list" }
  { include: "#expression" }

  { include: "#core_function" }
  { include: "#other_function" }

  { include: "#annotation" }
  { include: "#number" }
  { include: "#string" }
  { include: "#docstring" }
  { include: "#keyword" }
  { include: "#regexp" }

  { include: "#constant" }

  { include: "#comment" }
]
repository:
  namespace:
    patterns: [
      {
        name: "clojure.header.namespace"
        match: "(?<=\\()ns\\b"
      }
    ]
  require:
    patterns: [
      {
        name: "clojure.header.require"
        match: "(?<=\\()(use|require)\\b"
      }
    ]
  special:
    patterns: [
      {
        name: "clojure.special"
        match: '''
          (?x)
          						(?<=\\() # preceded by (
          						( do|if-not|if|when-not|when|case|
                        loop|doseq|recur|
          						  cond|
                        let|
                        =|not=|
                        or\\*?|and\\*?|not\\*?
                      )
          						(?=(\\s|\\())
        '''
      }
    ]
  core_function:
    patterns: [
      {
        name: "clojure.function.function_name.core_function"
        match: '''
          (?x)
          						(?<=\\()
          						(list|cons|rest|conj|second|(f|n)?first|(f|n)?next|seq|instance\\??|seq\\??|char\\??|string\\??|map?|vector\\??|assoc|meta|with-meta|assert-valid-fdecl|sigs|last|butlast|to-array|cast|vector|vec|hash-(map|set)|sorted-(map|map-by|set|set-by)|nil\\?|false\\?|true\\?|boolean\\??|not|some\\??|any\\??|str|symbol\\??|keyword\\??|symbol|gensym|keyword|find-keyword|spread|list*?|apply|vary-meta|lazy-seq|chunk|chunk-(append|buffer|first|rest|next|cons)|chunked-seq\\??|concat|delay\\??|force|identical\\??|compare|zero\\?|count|int|nth|inc'?|reduce1|reverse|complement|constantly|identity|name|namespace|boolean|ident\\??|simple-ident\\??|qualified-ident\\??|simple-symbol\\??|qualified-symbol\\??|locking|comp|juxt|partial|sequence|every\\?|not-every\\?|some\\?|not-any\\?|dotimes|map|declare|mapcat|filter|remove|reduced\\??|ensure-reduced|unreduced|take|take-while|drop|drop-last|take-last|drop-while|cycle|split-at|split-with|repeat|replicate|iterate|range|merge|merge-with|line-seq|comparator|sort|sort-by|dorun|doall|nthnext|nthrest|partition
                      )
        '''
      }
    ]
  expression:
    patterns: [
      {
        name: "clojure.expression.definition"
        begin: '''
          (?x)
          						(?<=\\()       # preceded by (
          						(defn|defmacro) # 1.
                      \\s*
                      (\\^[[:alnum:]:]+?)? # 2. annotation
                      \\s*
                      ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*) # 3. name
                      \\s*
                      (\\"[^\\"]*\\")? # 4. docstring
                      \\s*
          						(\\[)
          						  (([\\s,]*
          						    ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*) # 5. list of parameters
          						   )*?
          						  )\\s*(?=\\])
        '''
        captures:
          "1":
            name: "clojure.definition.definition_type"
          "2":
            name: "clojure.literal.annotation"
          "3":
            name: "clojure.definition.definition_name"
          "4":
            name: "clojure.comment.docstring"
          "6":
            name: "clojure.definition.definition_parameter"
        # end: "(?=\\))"
        end: "(?=\\])"
      }
      {
        name: "clojure.expression.lambda"
        begin: '''
          (?x)
          						(?<=\\() # preceded by (
          						(fn)\\s+
          						(\\[) # opening paren
          						  (([\\s,]*?
          						    ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
          						   )*
          						  )\\s*(?=\\])
        '''
        captures:
          "1":
            name: "clojure.definition.definition_type"
          "3":
            name: "clojure.definition.definition_parameter"
        end: "(?=\\])"
      }
      {
        name: "clojure.expression.definition"
        # begin: "(?<=\\()(def)\\s(^[[:alnum]\\:]+\\s)?([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\s*.*?"
        begin: "(?<=\\()(def)\\s(\\^.*?\\s)?([[:alnum:]!$%&*+-./:<=>?@^_~]+)\\s*.*?"
        captures:
          "1":
            name: "clojure.definition.definition_type"
          "2":
            name: "clojure.literal.annotation"
          "3":
            name: "clojure.definition.definition_name"
        end: "(?=\\))"
        patterns: [
          {
            include: "#annotation"
          }
          {
            include: "#comment"
          }
          {
            include: "#sexp"
          }
          {
            include: "#string"
          }
          {
            include: "#constant"
          }
          {
            include: "#number"
          }
        ]
      }
      {
        include: "#core_function"
      }
      {
        include: "#string"
      }
      {
        include: "#regexp"
      }
      {
        include: "#keyword"
      }
      {
        include: "#constant"
      }

      {
        match: "(?<=[\\(\\s])(#\\\\)x[0-9A-F]{2,4}(?=[\\s\\)])"
        name: "clojure.literal.number.hex"
      }
      {
        match: "(?<=[\\(\\s])(#\\\\).(?=[\\s\\)])"
        name: "clojure.literal.character.escape"
      }
      {
        name: "clojure.function.function_name"
        match: "(?<=\\()(\\w[A-Za-z0-9_\\-/]*)\\b"
        captures:
          "1":
            name: "clojure.function.function_name.other_function"
      }
    ]
  symbol:
    patterns: [
      {
        name: "clojure.quote.symbol"
        match: "'[0-9a-zA-Z_]+"
      }
    ]
  number:
    patterns: [
      {
        name: "clojure.literal.number"
        match: "\\b[0-9][0-9.Ee]*"
      }
    ]
  string:
    patterns: [
      {
        name: "clojure.literal.string"
        begin: "(\")"
        end: "(\")"
        patterns: [
          {
            match: "\\\\."
            name: "clojure.literal.string.escape"
          }
        ]
      }
    ]
  annotation:
    patterns: [
      {
        name: "clojure.literal.annotation"
        # match: "(?<=[\\s\\(\\[\\{])^.+?(\\s|\\b)"
        match: "\\^[a-zA-Z0-9_:']+?(?=\\s)"
        # match: "^.+?(?=\\s)"
        # match: "\\^aot"
      }
    ]
  keyword:
    patterns: [
      {
        name: "clojure.literal.keyword"
        match: "(?<=[^0-9a-zA-Z\\^]):.+?(?=(\\s|\\b))"
      }
    ]
  regexp:
    patterns: [
      {
        name: "clojure.literal.regexp"
        begin: "(#\")"
        end: "(\")"
        patterns: [
          {
            match: "\\\\."
            name: "clojure.literal.string.escape"
          }
        ]
      }
    ]
  constant:
    patterns: [
      {
        name: "clojure.literal.constant"
        match: "(true|false|nil|\\b[A-Z][A-Z0-9_\\-]*\\b)"
      }
    ]
  comment:
    patterns: [
      {
        name: "clojure.comment"
        match: "(;).*$\\n?"
      }
    ]
  docstring:
    patterns: [
      {
        name: "clojure.comment.docstring"
        begin: "(\")"
        end: "(\")"
      }
    ]
